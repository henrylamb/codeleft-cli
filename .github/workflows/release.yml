name: Release codeleft-cli

on:
  push:
    branches:
      - main
    # Run on any change to make debugging easier, we'll check version changes in the workflow
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write # Needed for creating releases

jobs:
  debug-info:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Debug Event Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          
      - name: List files changed
        run: |
          git diff --name-only ${{ github.event.before }} ${{ github.event.after }} || echo "Could not determine files changed"
          
  check-version:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    outputs:
      current_version: ${{ steps.get_version.outputs.version }}
      should_release: ${{ steps.check_tag.outputs.should_release }}
      version_changed: ${{ steps.check_version_change.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for tags
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22' # Use a version compatible with your project

      - name: Get version from main.go
        id: get_version
        run: |
          VERSION=$(grep -o 'const Version = "[^"]*"' main.go | cut -d'"' -f2)
          echo "Version found: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Check if version changed
        id: check_version_change
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, check if main.go changed in this push
            if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "main.go"; then
              # Check if the version line changed
              if git diff ${{ github.event.before }} ${{ github.event.after }} -- main.go | grep -q "const Version"; then
                echo "Version in main.go changed"
                echo "changed=true" >> $GITHUB_OUTPUT
              else
                echo "main.go changed but version didn't"
                echo "changed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "main.go was not modified in this push"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            # For PR events, always set to true to check in the next step
            echo "PR event, assuming version might have changed"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag exists
        id: check_tag
        run: |
          if [ -z "$(git tag -l v${{ steps.get_version.outputs.version }})" ]; then
            echo "Tag v${{ steps.get_version.outputs.version }} does not exist. Creating release."
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${{ steps.get_version.outputs.version }} already exists. Skipping release."
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
  
  release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true' && needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22' # Use a version compatible with your project

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ needs.check-version.outputs.current_version }} -m "Release v${{ needs.check-version.outputs.current_version }}"
          git push origin v${{ needs.check-version.outputs.current_version }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: v1.26.2  # Specifying a compatible version
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

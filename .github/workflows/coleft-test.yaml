name: Run Codeleft CLI and Attempt HTML Render in Summary

on:
  push:
    branches:
      - main

jobs:
  run-codeleft-cli:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Download and Extract codeleft-cli
      - name: Download & Install codeleft-cli
        run: |
          VERSION=v0.1.5  # Update to the desired version
          OS=Linux
          ARCH=x86_64
          ASSET_NAME=codeleft-cli_${OS}_${ARCH}.tar.gz
          DOWNLOAD_URL="https://github.com/henrylamb/codeleft-cli/releases/download/${VERSION}/${ASSET_NAME}"

          curl -L -o codeleft-cli.tar.gz "$DOWNLOAD_URL"
          tar -xzf codeleft-cli.tar.gz
          chmod +x codeleft-cli
          sudo mv codeleft-cli /usr/local/bin/

      # 3. Execute codeleft-cli Command
      - name: Execute codeleft-cli Command
        id: run-codeleft # Give the step an ID to check its outcome if needed
        run: |
          cd "${GITHUB_WORKSPACE}"

          # Ensure .codeLeft directory exists
          if [ ! -d ".codeLeft" ]; then
            echo "Error: .codeleft directory does not exist in the repository root."
            exit 1
          fi

          # Run the codeleft-cli command (adjust flags as necessary)
          # Ensure this command actually creates 'CodeLeft-Coverage-Report.html'
          codeleft-cli -asses-coverage --create-report -threshold-percent=80 -threshold-grade=A -tools "SOLID,OWASP-TOP-10,PR Ready"

          # Check if the report file was created
          if [ ! -f "CodeLeft-Coverage-Report.html" ]; then
            echo "::error::CodeLeft-Coverage-Report.html was not generated by the command."
            exit 1
          else
            echo "CodeLeft-Coverage-Report.html generated successfully."
          fi

      # 4. Upload Coverage Report as an Artifact (Recommended Fallback)
      - name: Upload Coverage Report Artifact
        # Only run if the report generation step was successful
        if: steps.run-codeleft.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: CodeLeft-Coverage-Report-(Downloadable) # Renamed slightly for clarity
          path: CodeLeft-Coverage-Report.html

      # 5. Attempt to Render HTML Report Directly in Summary (EXPERIMENTAL)
      - name: Attempt to Render HTML Report in Summary (Experimental)
        # Only run if the report generation step was successful
        if: steps.run-codeleft.outcome == 'success'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY # Add a blank line
          echo "---" >> $GITHUB_STEP_SUMMARY # Add a horizontal rule separator
          echo "## EXPERIMENTAL: Attempting Raw HTML Embed" >> $GITHUB_STEP_SUMMARY
          echo "**Disclaimer:** The following content is the raw HTML from \`CodeLeft-Coverage-Report.html\`." >> $GITHUB_STEP_SUMMARY
          echo "**It will likely NOT render correctly.** GitHub Actions summaries use Markdown, which does not support full HTML, CSS, or JavaScript rendering." >> $GITHUB_STEP_SUMMARY
          echo "For proper viewing, please download the 'CodeLeft-Coverage-Report-(Downloadable)' artifact from this run." >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if file exists again just in case, then append its content
          if [ -f "CodeLeft-Coverage-Report.html" ]; then
            cat CodeLeft-Coverage-Report.html >> $GITHUB_STEP_SUMMARY
          else
            echo "**Error:** Could not find CodeLeft-Coverage-Report.html to embed." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "(End of experimental HTML embed)" >> $GITHUB_STEP_SUMMARY
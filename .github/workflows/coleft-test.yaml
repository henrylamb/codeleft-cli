name: Run Codeleft CLI and Attempt HTML Render in Summary

on:
  push:
    branches:
      - main

jobs:
  run-codeleft-cli:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Download and Extract codeleft-cli
      - name: Download & Install codeleft-cli
        run: |
          VERSION=v0.1.5  # Update to the desired version
          OS=Linux
          ARCH=x86_64
          ASSET_NAME=codeleft-cli_${OS}_${ARCH}.tar.gz
          DOWNLOAD_URL="https://github.com/henrylamb/codeleft-cli/releases/download/${VERSION}/${ASSET_NAME}"

          curl -L -o codeleft-cli.tar.gz "$DOWNLOAD_URL"
          tar -xzf codeleft-cli.tar.gz
          chmod +x codeleft-cli
          sudo mv codeleft-cli /usr/local/bin/

      # 3. Execute codeleft-cli Command
      - name: Execute codeleft-cli Command
        id: run-codeleft # Give the step an ID to check its outcome if needed
        run: |
          cd "${GITHUB_WORKSPACE}"

          # Ensure .codeLeft directory exists
          if [ ! -d ".codeLeft" ]; then
            echo "Error: .codeleft directory does not exist in the repository root."
            exit 1
          fi

          # Run the codeleft-cli command (adjust flags as necessary)
          # Ensure this command actually creates 'CodeLeft-Coverage-Report.html'
          codeleft-cli -asses-coverage --create-report -threshold-percent=80 -threshold-grade=A -tools "SOLID,OWASP-TOP-10,PR Ready"

          # Check if the report file was created
          if [ ! -f "CodeLeft-Coverage-Report.html" ]; then
            echo "::error::CodeLeft-Coverage-Report.html was not generated by the command."
            exit 1
          else
            echo "CodeLeft-Coverage-Report.html generated successfully."
          fi

        # 4. Upload Coverage Report as an Artifact (Still useful backup)
      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CodeLeft-Coverage-Report-(Downloadable)
          path: CodeLeft-Coverage-Report.html

      # 5. Deploy Report to GitHub Pages
      - name: Deploy Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4 # Or latest version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./ # Assuming the report is in the root, adjust if needed
          publish_branch: gh-pages # Branch to deploy to
          # Optional: Keep history or force push
          # keep_files: false
          # force_orphan: true
          # Optional: Put in a specific directory on gh-pages, e.g., based on run ID
          # destination_dir: ./reports/${{ github.run_id }}
          # If using destination_dir, adjust the URL below accordingly

      # 6. Add Link to GitHub Pages Report in Summary
      - name: Add Report Link to Summary
        run: |
          # Construct the GitHub Pages URL (adjust for your username/repo/path)
          # Basic structure: https://<username>.github.io/<repository-name>/<path-to-report>
          # Example assumes report is at the root of gh-pages branch:
          PAGES_URL="https://$(echo $GITHUB_REPOSITORY | cut -d/ -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d/ -f2)/CodeLeft-Coverage-Report.html"
          # If using destination_dir like above:
          # PAGES_URL="https://$(echo $GITHUB_REPOSITORY | cut -d/ -f1).github.io/$(echo $GITHUB_REPOSITORY | cut -d/ -f2)/reports/${{ github.run_id }}/CodeLeft-Coverage-Report.html"

          echo "### CodeLeft Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“Š The full HTML coverage report has been deployed." >> $GITHUB_STEP_SUMMARY
          # Use Markdown link syntax: [Link Text](URL)
          echo "[**Click here to view the rendered report**](${PAGES_URL})" >> $GITHUB_STEP_SUMMARY
          echo "(Opens the report hosted on GitHub Pages in a new tab)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Alternatively, download the report from the 'Artifacts' section above." >> $GITHUB_STEP_SUMMARY